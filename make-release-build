#!/bin/bash
# bash is required because we need bash's printf to guarantee a cross-platform
# timestamp format.

set -e
set -x

# make sure we're on a signed tag that matches the version name
versionName=`sed -n 's,.*versionName *"\([^"]*\)".*,\1,p' app/build.gradle`
describe=`git describe`
if [ $versionName != $describe ]; then
    echo "WARNING: building $describe, which is not the latest release ($versionName)"
else
    # make a clearer warning above by putting this here
    set +x
    echo ""
    echo ""
    echo "Checking git tag signature for release build:"
    gpg --list-key 9F0FE587374BBE81 || gpg --recv-key 9F0FE587374BBE81
    gpg --list-key E9E28DEA00AA5556 || gpg --recv-key E9E28DEA00AA5556
    gpg --list-key A801183E69B37AA9 || gpg --recv-key A801183E69B37AA9
    git tag -v $versionName
    echo ""
    echo ""
    set -x
fi


if [ -z $ANDROID_HOME ]; then
    if [ -e ~/.android/bashrc ]; then
        . ~/.android/bashrc
    else
        echo "ANDROID_HOME must be set!"
        exit
    fi
fi

projectroot=`pwd`
projectname=`sed -n 's,.*name="app_name">\(.*\)<.*,\1,p' app/src/main/res/values/strings.xml`

# standardize timezone to reduce build differences
export TZ=UTC

git reset --hard
git clean -fdx

gradle assembleRelease

apkroot=$projectroot/app/build/outputs/apk/$projectname-$describe-release
echo "delete the signed one, the signing happens on a different machine"
rm -f $apkroot.apk
apk=$apkroot-unsigned.apk

# standardize timestamps in ZIP headers, requires strip-nondeterminism 0.014
if which strip-nondeterminism > /dev/null; then
    strip-nondeterminism -t zip -T $(git log -n1 --format=format:%at) $apk
fi

# echo the checksum to build logs
sha256sum $apk

if which gpg > /dev/null; then
    if [ -z "`gpg --list-secret-keys`" ]; then
        echo "No GPG secret keys found, not signing APK"
    else
        gpg --detach-sign $apk
    fi
else
    echo "gpg not found, not signing APK"
fi
